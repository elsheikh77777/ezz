// ุฅุนุฏุงุฏุงุช ุงููููุน ุงูุชูุงุนููุฉ

// ุชุนุฑูู ูุงุฆู ุงููุญุชูู ูุงูุชุฑุฌูุฉ ุนูู ูุณุชูู ุนุงููู
const content = {
    'ar': {
        navLinks: ['ุงูุฑุฆูุณูุฉ', 'ูู ูุญู', 'ุงูุฎุฏูุงุช', 'ุงุญุฌุฒ ููุนุฏ', 'ุชูุงุตู ูุนูุง'],
        // ูุญุชูู ุงูุตูุญุฉ ุงูุฑุฆูุณูุฉ
        home: {
            heroTitle: 'ูุฑุญุจุงู ุจูู ูู ูุฑูุฒ ุฎุงูุฏ ุนุฒ ุงูุฑุฌุงู',
            heroText: 'ูุญู ููุฏู ุฑุนุงูุฉ ุตุญูุฉ ูุชุฎุตุตุฉ ูุญูููุงู ูุจุชูุฑุฉ ููุณุงุนุฏุชู ุนูู ุงุณุชุนุงุฏุฉ ุนุงููุชู ูุชุญุณูู ุฌูุฏุฉ ุญูุงุชู. ูุฑูููุง ูู ุงููุฎุชุตูู ููุชุฒู ุจุชูุฏูู ุฃูุถู ุงูุฎุฏูุงุช ูุงูุนูุงุฌุงุช ุจุงุณุชุฎุฏุงู ุฃุญุฏุซ ุงูุชูููุงุช.',
            ctaButtons: ['๐ ุงุญุฌุฒ ููุนุฏู ุงูุขู', '๐ ุงูุชุดู ุฎุฏูุงุชูุง'],
            sectionTitle: 'ููุงุฐุง ุชุฎุชุงุฑ ูุฑูุฒูุงุ',
            sectionDesc: 'ูุญู ููุชุฒููู ุจุชูุฏูู ุฃุนูู ูุณุชููุงุช ุงูุฑุนุงูุฉ ุงูุตุญูุฉ ุจุฃุญุฏุซ ุงูุชูููุงุช ูุงูุฃุณุงููุจ ุงูุนูุงุฌูุฉ',
            featureCards: [
                {title: 'ุฑุนุงูุฉ ูุชุฎุตุตุฉ', desc: 'ููุฏู ุฎุฏูุงุช ุทุจูุฉ ูุชุฎุตุตุฉ ุนูู ุฃุนูู ูุณุชูู ูู ุงูุฌูุฏุฉ ูุงูุงุญุชุฑุงููุฉ ูุถูุงู ุฃูุถู ุงููุชุงุฆุฌ ุงูุนูุงุฌูุฉ.'},
                {title: 'ูุฑูู ุทุจู ูุชููุฒ', desc: 'ูุถู ูุฑูุฒูุง ูุฎุจุฉ ูู ุงูุฃุทุจุงุก ูุงููุฎุชุตูู ุฐูู ุงูุฎุจุฑุฉ ุงูุนุงููุฉ ูู ูุฌุงู ุงูุฑุนุงูุฉ ุงูุตุญูุฉ.'},
                {title: 'ุฃุญุฏุซ ุงูุชูููุงุช', desc: 'ูุณุชุฎุฏู ุฃุญุฏุซ ุงูุฃุฌูุฒุฉ ูุงูุชูููุงุช ุงูุทุจูุฉ ูุถูุงู ุฏูุฉ ุงูุชุดุฎูุต ููุนุงููุฉ ุงูุนูุงุฌ.'}
            ],
        },
        // ูุญุชูู ุตูุญุฉ ูู ูุญู
        about: {
            heroTitle: 'ูู ูุญู',
            heroText: 'ูุฑูุฒ ุฑุงุฆุฏ ูู ูุฌุงู ุงูุฑุนุงูุฉ ุงูุตุญูุฉ ุงููุชุฎุตุตุฉุ ููุฏู ุฎุฏูุงุช ุทุจูุฉ ูุชููุฒุฉ ุจุฃุนูู ูุนุงููุฑ ุงูุฌูุฏุฉ ูุงูุงุญุชุฑุงููุฉ. ูุฑูููุง ูู ุงููุฎุชุตูู ููุชุฒู ุจุชูุฏูู ุฃูุถู ุงูุฑุนุงูุฉ ููุฑุถุงูุง ุจุงุณุชุฎุฏุงู ุฃุญุฏุซ ุงูุชูููุงุช ุงูุทุจูุฉ.',
            teamSectionTitle: 'ูุฑูููุง ุงูุทุจู ุงููุชููุฒ',
            teamSectionDesc: 'ูุฎุจุฉ ูู ุงูุฃุทุจุงุก ูุงููุฎุชุตูู ุฐูู ุงูุฎุจุฑุฉ ุงูุนุงููุฉ ูู ูุฌุงู ุงูุฑุนุงูุฉ ุงูุตุญูุฉ',
            teamOverlayTitle: 'ูุฑูู ูุชูุงูู ูู ุงููุฎุชุตูู',
            teamOverlayDesc: 'ูุถู ูุฑูุฒูุง ูุฎุจุฉ ูู ุงูุฃุทุจุงุก ูุงููุฎุชุตูู ุงููุคูููู ุชุฃูููุงู ุนุงููุงู ูุชูุฏูู ุฃูุถู ูุณุชููุงุช ุงูุฑุนุงูุฉ ุงูุตุญูุฉ',
            visionMissionTitle: 'ุฑุคูุชูุง ูุฑุณุงูุชูุง',
            visionMissionDesc: 'ูุณุนู ูุฃู ูููู ุงููุฑุฌุน ุงูุฃูู ูู ุงูุฑุนุงูุฉ ุงูุตุญูุฉ ุงููุชุฎุตุตุฉ',
            visionCardTitle: 'ุงูุฑุคูุฉ',
            visionCardDesc: 'ุฃู ูููู ูุฑูุฒุงู ุฑุงุฆุฏุงู ูุชุญุณูู ุตุญุฉ ุงูุฅูุณุงู ุญูู ุงูุนุงููุ ุฎุงุตุฉ ูู ูุฌุงู ุทุจ ูุฌุฑุงุญุฉ ุงูุนูููุ ูุณุนู ูุชูุฏูู ุฃุนูู ูุณุชููุงุช ุงูุฑุนุงูุฉ ุงูุทุจูุฉ ูุงูุตุญูุฉ ุงููุชูุฏูุฉุ ุงุนุชูุงุฏุงู ุนูู ุฃุฏูุงุช ุงูุจุญุซ ูุงูุชุทููุฑ ุงููุณุชูุฑ ูุชุญููู ุฃูุฏุงู ุงูุชูููุฉ ุงููุณุชุฏุงูุฉ ูู ุฎูุงู ุชุทุจูู ุฃุญุฏุซ ุงููุนุงููุฑ ุงูุทุจูุฉ ูุงูุงุณุชูุงุฏุฉ ูู ุงูุฐูุงุก ุงูุตูุงุนู ูุงูุชูููููุฌูุง ุงููุชูุฏูุฉ.',
            missionCardTitle: 'ุงูุฑุณุงูุฉ',
            missionCardDesc: 'ูุณุนู ูุชุญุณูู ุตุญุฉ ุงูุฅูุณุงู ุนุงูุฉ ูู ูุฌุงู ุงูุนููู ุฎุงุตุฉ ุจุฅุฏุงุฑุฉ ุฃูุถู ูุฃุญุฏุซ ุงูุทุฑู ูุงูุชูููุงุช ูุงูุฃุฌูุฒุฉ ุงููุชูุฏูุฉ ูุชุทููุฑ ูุฌุงู ุงูุทุจ ูุงูุฌุฑุงุญุฉ. ููุฏู ุฅูู ุชุญููู ูุคุณุณุฉ ุญูุงุฉ ูุฑููุฉ ููู ูููููุง ูุน ุงูุณุนู ูุฎุฏูุฉ ุงููุฌุชูุน ูุงูุฅูุณุงููุฉ ุญูู ุงูุนุงููุ ุฅููุงูุงู ููุง ุจุญู ุงููุณุงูุงุฉ ุจูู ุฌููุน ุงูุจุดุฑ.',
            statsSectionTitle: 'ุฅูุฌุงุฒุงุชูุง ุจุงูุฃุฑูุงู',
            statsSectionDesc: 'ุฃุฑูุงู ุชุนูุณ ุงูุชุฒุงููุง ุจุชูุฏูู ุฃูุถู ุงูุฎุฏูุงุช ุงูุทุจูุฉ',
            statLabels: ['ุนุงูุงู ูู ุงูุฎุจุฑุฉ'], 
            valuesSectionTitle: 'ููููุง ุงูุฃุณุงุณูุฉ',
            valuesSectionDesc: 'ุงููุจุงุฏุฆ ุงูุชู ูุคูู ุจูุง ููุทุจููุง ูู ุนูููุง ุงููููู',
            valueItems: [
                {title: 'ุงูุซูุฉ ูุงูุฃูุงูุฉ', desc: 'ูุจูู ุนูุงูุงุช ูููุฉ ูุน ูุฑุถุงูุง ุนูู ุฃุณุงุณ ุงูุซูุฉ ูุงูุดูุงููุฉ ุงููุงููุฉ'},
                {title: 'ุงูุฌูุฏุฉ ูุงูุชููุฒ', desc: 'ูุณุนู ุฏุงุฆูุงู ูุชุญููู ุฃุนูู ูุนุงููุฑ ุงูุฌูุฏุฉ ูู ุฌููุน ุฎุฏูุงุชูุง ุงูุทุจูุฉ'},
                {title: 'ุงูุงุจุชูุงุฑ ูุงูุชุทููุฑ', desc: 'ููุงูุจ ุฃุญุฏุซ ุงูุชุทูุฑุงุช ูู ุงููุฌุงู ุงูุทุจู ููุณุชุซูุฑ ูู ุงูุชูููุงุช ุงูุญุฏูุซุฉ'},
                {title: 'ุงูุฑุญูุฉ ูุงูุนูุงูุฉ', desc: 'ููุฏู ุฑุนุงูุฉ ุดุงููุฉ ููุชุนุงุทูุฉ ููู ูุฑูุถ ูุฒูุฑ ูุฑูุฒูุง'},
                {title: 'ุงูุงูุชุฒุงู ุงููุฌุชูุนู', desc: 'ูุณุงูู ูู ุฎุฏูุฉ ุงููุฌุชูุน ููุดุฑ ุงููุนู ุงูุตุญู'},
                {title: 'ุงููุณุคูููุฉ ุงูููููุฉ', desc: 'ูุชุญูู ูุณุคูููุฉ ูุงููุฉ ุชุฌุงู ุตุญุฉ ูุณูุงูุฉ ูุฑุถุงูุง'}
            ]
        },
        // ูุญุชูู ุตูุญุฉ ุงูุฎุฏูุงุช
        services: {
            heroTitle: 'ุฎุฏูุงุชูุง ุงูุดุงููุฉ ูุงููุชูุงููุฉ',
            heroText: 'ููุฏู ูุฌููุนุฉ ูุงุณุนุฉ ูู ุงูุฎุฏูุงุช ุงูุทุจูุฉ ุงููุชุฎุตุตุฉ ูู ูุฌุงู ุทุจ ูุฌุฑุงุญุฉ ุงูุนูููุ ุจุงุณุชุฎุฏุงู ุฃุญุฏุซ ุงูุชูููุงุช ูุฃูุถู ุงูููุงุกุงุช ูุถูุงู ุฃูุถู ุงููุชุงุฆุฌ ููุฑุถุงูุง.',
            mainServicesTitle: 'ุชุฎุตุตุงุชูุง ุงูุฃุณุงุณูุฉ',
            mainServicesDesc: 'ูุญู ููุง ูุชูุฏูู ุงูุฑุนุงูุฉ ุงูุตุญูุฉ ุงูุดุงููุฉ ูุนูููู',
            serviceCards: [
                {icon: '๐๏ธ', title: 'ุชุตุญูุญ ุงููุธุฑ', desc: 'ุฃุญุฏุซ ุชูููุงุช ุงูููุฒุฑ ูุชุตุญูุญ ุนููุจ ุงูุฅุจุตุงุฑ ูุชุญููู ุฑุคูุฉ ูุงุถุญุฉ.'},
                {icon: '๐ง', title: 'ุงูุฌูุงู ูุฃูุฑุงุถ ุณุทุญ ุงูุนูู', desc: 'ุชุดุฎูุต ูุนูุงุฌ ุดุงูู ููุดุงูู ุฌูุงู ุงูุนูู ูุฃูุฑุงุถ ุงูุณุทุญ.'}, 
                {icon: '๐ฌ', title: 'ุนูุงุฌ ุงูุดุจููุฉ', desc: 'ุนูุงุฌ ุฃูุฑุงุถ ุงูุดุจููุฉ ุงููุฎุชููุฉ ุจุฃุญุฏุซ ุงูุฃุณุงููุจ ูุงูุชูููุงุช.'},
                {icon: 'โช', title: 'ุฌุฑุงุญุฉ ุงููุงุก ุงูุฃุจูุถ (ุงููุชุงุฑุงูุช)', desc: 'ุฅุฌุฑุงุก ุฌุฑุงุญู ุขูู ููุนุงู ูุฅุฒุงูุฉ ุงููุงุก ุงูุฃุจูุถ ูุงุณุชุนุงุฏุฉ ุงูุฑุคูุฉ.'},
                {icon: '๐', title: 'ุงูุญูู ููุฃุทูุงู ูุงููุจุงุฑ', desc: 'ุชุดุฎูุต ูุนูุงุฌ ุญุงูุงุช ุงูุญูู ุงููุฎุชููุฉ ูุฌููุน ุงููุฆุงุช ุงูุนูุฑูุฉ.'},
                {icon: '๐ต', title: 'ุฌุฑุงุญุฉ ุงููุงุก ุงูุฃุฒุฑู (ุงูุฌูููููุง)', desc: 'ุนูุงุฌ ุงูุฌูููููุง ููุญูุงุธ ุนูู ุงูุจุตุฑ ูููุน ุงููุถุงุนูุงุช.'}
            ],
            dryEyeSectionTitle: 'ูุญุฏุฉ ุนูุงุฌ ุงูุฌูุงู ูุฃูุฑุงุถ ุณุทุญ ุงูุนูู',
            dryEyeSectionDesc: 'ุนูููู ุฃูุงูุฉ ูุฏููุง: ุฃุญุฏุซ ุงูุชูููุงุช ูุชุดุฎูุต ูุนูุงุฌ ุดุงูู',
            dryEyeContentTitle: 'ุฃุญุฏุซ ุฌูุงุฒ ุชุดุฎูุตู ููุฌูุงู ูุฃูุฑุงุถ ุณุทุญ ุงูุนูู ุจุงูุนุงูู',
            dryEyeList: [
                'ุนูุงุฌ ุฌูุงู ุงูุนูู ุงููุฒูู',
                'ุณุฏุงุฏุงุช ูุญูู ุงููููุฑ ุจุงูููุงุฉ ุงูุฏูุนูุฉ',
                'ุนูุงุฌ ุญุณุงุณูุฉ ุงูุนููู ุงูููุณููุฉ ูุงููุฒููุฉ',
                'ูุชุงุจุนุฉ ูุนูุงุฌ ูุฑุญุฉ ุงููุฑููุฉ ุงูููุงุนูุฉ ูุงููุนุฏูุฉ',
                'ุนูุงุฌ ุนุชุงูุฉ ุงููุฑููุฉ ุจุงูุนูุงุฌ ุงูุฏูุงุฆู ูุงูููุฒุฑ ูุฒุฑุงุนุฉ ุงููุฑููุฉ',
                'ุฒุฑุงุนุฉ ุงูุฎูุงูุง ุงูุฌุฐุนูุฉ ูุฃูุฑุงุถ ููุต ุงูุฎูุงูุง ุงูุฌุฐุนูุฉ ุจุงููุฑููุฉ'
            ],
            quickConsultation: {
                sectionTitle: 'ุงุญุตู ุนูู ุงุณุชุดุงุฑุฉ ุณุฑูุนุฉ โจ',
                sectionDesc: 'ุตู ุฃุนุฑุงุถู ุฃู ุงุณุชูุณุงุฑูุ ูุณูุณุงุนุฏู ูู ุชุญุฏูุฏ ุงูุฎุฏูุฉ ุงูููุงุณุจุฉ.',
                inputPlaceholder: 'ูุซุงู: ุฃุนุงูู ูู ุฌูุงู ุดุฏูุฏ ูู ุงูุนูู ูุน ุญูุฉ ูุงุญูุฑุงุฑ...',
                buttonText: 'โจ ุงุญุตู ุนูู ุชูุตูุฉ ุงูุฎุฏูุฉ',
                emptyInputMessage: 'ุงูุฑุฌุงุก ุฅุฏุฎุงู ูุตู ูุฃุนุฑุงุถู ุฃู ุงุณุชูุณุงุฑู.',
                errorMessage: 'ูู ูุชููู ูู ุชูุฏูู ุชูุตูุฉ ูู ุงูููุช ุงูุญุงูู. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.',
                apiErrorMessage: 'ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูุงุชุตุงู ุจุงูุฎุฏูุฉ. ูุฑุฌู ุงููุญุงููุฉ ูุงุญูุงู.'
            }
        },
        // ูุญุชูู ุตูุญุฉ ุญุฌุฒ ุงูููุงุนูุฏ
        appointment: {
            heroTitle: 'ุงุญุฌุฒ ููุนุฏู ุงูุขู',
            heroText: 'ุงููุฃ ุงููููุฐุฌ ุฃุฏูุงู ูุญุฌุฒ ููุนุฏ ูู ูุฑูุฒ ุฎุงูุฏ ุนุฒ ุงูุฑุฌุงู. ุณูุชูุงุตู ูุนู ูุชุฃููุฏ ุงูููุนุฏ ูู ุฃูุฑุจ ููุช ูููู.',
            formTitle: 'ูููุฐุฌ ุญุฌุฒ ุงูููุงุนูุฏ',
            formDesc: 'ุงูุฑุฌุงุก ููุก ุฌููุน ุงูุญููู ุงููุทููุจุฉ ูุถูุงู ูุนุงูุฌุฉ ุทูุจู ุจูุฌุงุญ.',
            labels: {
                fullName: 'ุงูุงุณู ุจุงููุงูู:',
                phoneNumber: 'ุฑูู ุงููุงุชู:',
                nationalId: 'ุงูุฑูู ุงููููู (14 ุฑูู):',
                specialty: 'ุงูุชุฎุตุต ุงููุทููุจ:',
                age: 'ุงูุณู:',
                desiredTime: 'ุงูููุช ุงููุทููุจ ููููุนุฏ:'
            },
            specialtyOptions: {
                placeholder: 'ุงุฎุชุฑ ุงูุชุฎุตุต',
                visionCorrection: 'ุชุตุญูุญ ุงููุธุฑ',
                dryEye: 'ุงูุฌูุงู ูุฃูุฑุงุถ ุณุทุญ ุงูุนูู',
                retina: 'ุนูุงุฌ ุงูุดุจููุฉ',
                cataract: 'ุฌุฑุงุญุฉ ุงููุงุก ุงูุฃุจูุถ (ุงููุชุงุฑุงูุช)',
                strabismus: 'ุงูุญูู ููุฃุทูุงู ูุงููุจุงุฑ',
                glaucoma: 'ุฌุฑุงุญุฉ ุงููุงุก ุงูุฃุฒุฑู (ุงูุฌูููููุง)',
                generalConsultation: 'ุงุณุชุดุงุฑุฉ ุนุงูุฉ',
                followUp: 'ูุชุงุจุนุฉ' 
            },
            submitButton: 'โ ุฅุฑุณุงู ุทูุจ ุงูุญุฌุฒ',
            successMessage: 'ุชู ุฅุฑุณุงู ุทูุจ ุญุฌุฒ ููุนุฏู ุจูุฌุงุญ! ุณูุชูุงุตู ูุนู ูุฑูุจุงู.',
            errorMessage: 'ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅุฑุณุงู ุทูุจ ุงูุญุฌุฒ. ุงูุฑุฌุงุก ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.',
            validation: {
                phoneNumber: 'ุงูุฑุฌุงุก ุฅุฏุฎุงู ุฑูู ูุงุชู ุตุงูุญ (10-15 ุฑูู).',
                nationalId: 'ุงูุฑุฌุงุก ุฅุฏุฎุงู 14 ุฑูููุง ููุฑูู ุงููููู.',
                age: 'ุงูุฑุฌุงุก ุฅุฏุฎุงู ุณู ุตุงูุญ (ุจูู 1 ู 120).',
                pastDateTime: 'ุงูุฑุฌุงุก ุงุฎุชูุงุฑ ุชุงุฑูุฎ ูููุช ูู ุงููุณุชูุจู.', 
                fridaySelection: 'ูุง ูููู ุญุฌุฒ ููุงุนูุฏ ููู ุงูุฌูุนุฉ. ุงูุฑุฌุงุก ุงุฎุชูุงุฑ ููู ุขุฎุฑ.' 
            }
        },
        // ูุญุชูู ุตูุญุฉ ุงุชุตู ุจูุง
        contact: {
            heroTitle: 'ุชูุงุตู ูุนูุง',
            heroText: 'ูุญู ููุง ููุฅุฌุงุจุฉ ุนูู ุฌููุน ุงุณุชูุณุงุฑุงุชูู ูุชูุฏูู ุงููุณุงุนุฏุฉ. ูุง ุชุชุฑุฏุฏูุง ูู ุงูุงุชุตุงู ุจูุง ุฃู ููุก ุงููููุฐุฌ ุฃุฏูุงู.',
            infoSectionTitle: 'ูุนูููุงุช ุงูุงุชุตุงู',
            infoSectionDesc: 'ูููููู ุงูุชูุงุตู ูุนูุง ุนุจุฑ ุงูุนูุงุฏุงุช ุงูุชุงููุฉ ุฃู ุฃุฑูุงู ุงููุงุชู ุงูุนุงูุฉ:',
            zaqaziqClinic: {
                title: 'ุนูุงุฏุฉ ุงูุฒูุงุฒูู',
                workingDaysLabel: 'ุฃูุงู ุงูุนูู:', // ุชู ุงูุชุนุฏูู
                workingDays: 'ุงูุณุจุชุ ุงูุงุซูููุ ุงูุฃุฑุจุนุงุก',
                generalHoursLabel: 'ููุงุนูุฏ ุงูุนูู ุงูุนุงูุฉ:', // ุชู ุงูุชุนุฏูู
                generalHours: 'ูู 9 ุตุจุงุญุงู ุญุชู 9 ูุณุงุกู',
                drKhaledHoursLabel: 'ููุงุนูุฏ ุฏ. ุฎุงูุฏ:', // ุชู ุงูุชุนุฏูู
                drKhaledHours: 'ุงูุณุจุช 12 ุธูุฑุงู - 2 ุธูุฑุงูุ ุงูุงุซููู ูุงูุฃุฑุจุนุงุก 10 ุตุจุงุญุงู - 7 ูุณุงุกู',
                consultantHoursLabel: 'ููุงุนูุฏ ุงูุงุณุชุดุงุฑููู:', // ุชู ุงูุชุนุฏูู
                consultantHours: 'ุจุงูู ุงูุฃูุงู (ุงูููุงู ุงูุฒุฑูุงุกุ ุงูููุฑุญ ูุงูุฌูุงูุ ุงูุฃุทูุงู ูุงูุญููุ ุนูุงุฏุฉ ุงูุดุจููุฉ)',
                addressLabel: 'ุงูุนููุงู:', // ุชู ุงูุชุนุฏูู
                address: 'ุงูุฒูุงุฒูู ุงูููููุฉ ุดุงุฑุน ุทูุจุฉ ุนููุถุฉ ุงูุงู ุงูุณ ูุฑูู ุชูุชู',
                mapLinkText: 'ุนุฑุถ ุนูู ุงูุฎุฑูุทุฉ', // ุชู ุงูุชุนุฏูู
                mapLink: 'https://maps.app.goo.gl/AAHNNJ6c3zvBJmQk9',
                whatsappLinkText: 'ูุงุชุณุงุจ ุงูุนูุงุฏุฉ', // ุชู ุงูุชุนุฏูู
                whatsappLink: 'https://api.whatsapp.com/send?phone=%2B201005595000',
                facebookLinkText: 'ุตูุญุฉ ุงูููุณุจูู', // ุชู ุงูุชุนุฏูู
                facebookLink: 'https://www.facebook.com/share/16mmwBin46/'
            },
            ibrahimiyaClinic: {
                title: 'ุนูุงุฏุฉ ุงูุฅุจุฑุงููููุฉ',
                workingDaysLabel: 'ุฃูุงู ุงูุนูู:', // ุชู ุงูุชุนุฏูู
                workingDays: 'ุงูุฃุญุฏุ ุงูุซูุงุซุงุกุ ุงูุฎููุณ',
                generalHoursLabel: 'ููุงุนูุฏ ุงูุนูู ุงูุนุงูุฉ:', // ุชู ุงูุชุนุฏูู
                generalHours: 'ุงูุฃุญุฏ ูุงูุฎููุณ',
                addressLabel: 'ุงูุนููุงู:', // ุชู ุงูุชุนุฏูู
                address: 'ุงูุฅุจุฑุงููููุฉ ุญู ุงูุตุงุบุฉ',
                mapLinkText: 'ุนุฑุถ ุนูู ุงูุฎุฑูุทุฉ', // ุชู ุงูุชุนุฏูู
                mapLink: 'https://maps.app.goo.gl/ayEhNVi1kKBcXv1f7',
                whatsappLinkText: 'ูุงุชุณุงุจ ุงูุนูุงุฏุฉ', // ุชู ุงูุชุนุฏูู
                whatsappLink: 'https://api.whatsapp.com/send?phone=%2B201005595000',
                facebookLinkText: 'ุตูุญุฉ ุงูููุณุจูู', // ุชู ุงูุชุนุฏูู
                facebookLink: 'https://www.facebook.com/share/16mmwBin46/'
            },
            generalPhoneNumbersTitle: 'ุฃุฑูุงู ุงูุงุชุตุงู ุงูุนุงูุฉ',
            phoneNumbers: ['+20 10 02470247', '+20 10 05595000'],
            formSectionTitle: 'ุฃุฑุณู ุดููุงู ุฃู ููุชุฑุญู', 
            formSectionDesc: 'ุงููุฃ ุงููููุฐุฌ ุฃุฏูุงู ูุณูุชูุงุตู ูุนู ูู ุฃูุฑุจ ููุช ูููู.',
            formLabels: {
                name: 'ุงูุงุณู:',
                phone: 'ุฑูู ุงููุงุชู:', 
                message: 'ุฑุณุงูุชู:'
            },
            formSubmitButton: 'โ๏ธ ุฅุฑุณุงู ุงูุฑุณุงูุฉ',
            formSuccessMessage: 'ุชู ุฅุฑุณุงู ุดููุงู/ููุชุฑุญู ุจูุฌุงุญ! ุดูุฑุงู ูู.', 
            formErrorMessage: 'ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅุฑุณุงู ุดููุงู/ููุชุฑุญู. ุงูุฑุฌุงุก ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.' 
        },
        footerText: 'ยฉ 2025 ูุฑูุฒ ุฎุงูุฏ ุนุฒ ุงูุฑุฌุงู. ุฌููุน ุงูุญููู ูุญููุธุฉ.'
    },
    'en': {
        navLinks: ['Home', 'About Us', 'Services', 'Book Appointment', 'Contact Us'],
        // Home page content
        home: {
            heroTitle: 'Welcome to Khaled Ezz Al-Rijal Center',
            heroText: 'We provide specialized healthcare and innovative solutions to help you regain your health and improve your quality of life. Our team of specialists is committed to providing the best services and treatments using the latest technologies.',
            ctaButtons: ['๐ Book Your Appointment', '๐ Discover Our Services'],
            sectionTitle: 'Why Choose Our Center?',
            sectionDesc: 'We are committed to providing the highest levels of healthcare with the latest techniques and therapeutic methods',
            featureCards: [
                {title: 'Specialized Care', desc: 'We provide specialized medical services at the highest level of quality and professionalism to ensure the best therapeutic results.'},
                {title: 'Distinguished Medical Team', desc: 'Our center includes a group of doctors and specialists with high experience in the field of healthcare.'},
                {title: 'Latest Technologies', desc: 'We use the latest medical devices and technologies to ensure accurate diagnosis and effective treatment.'}
            ],
        },
        // About Us page content
        about: {
            heroTitle: 'About Us',
            heroText: 'A leading center in specialized healthcare, we provide distinguished medical services with the highest standards of quality and professionalism. Our team of specialists is committed to providing the best care for our patients using the latest medical technologies.',
            teamSectionTitle: 'Our Distinguished Medical Team',
            teamSectionDesc: 'A group of highly experienced doctors and specialists in the field of healthcare',
            teamOverlayTitle: 'A Comprehensive Team of Specialists',
            teamOverlayDesc: 'Our center includes a group of highly qualified doctors and specialists to provide the best levels of healthcare',
            visionMissionTitle: 'Our Vision and Mission',
            visionMissionDesc: 'We strive to be the first reference in specialized healthcare',
            visionCardTitle: 'Vision',
            visionCardDesc: 'To be a leading center for improving human health around the world, especially in the field of ophthalmology and eye surgery. We seek to provide the highest levels of advanced medical and health care, relying on continuous research and development tools and achieving sustainable development goals by applying the latest medical standards and benefiting from artificial intelligence and advanced technology.',
            missionCardTitle: 'Mission',
            missionCardDesc: 'We seek to improve human health in general, especially in the field of ophthalmology, by managing the best and latest methods, techniques, and advanced devices to develop the field of medicine and surgery. We aim to achieve a decent life for all our staff while striving to serve society and humanity around the world, believing in the right to equality among all people.',
            statsSectionTitle: 'Our Achievements in Numbers',
            statsSectionDesc: 'Numbers reflecting our commitment to providing the best medical services',
            statLabels: ['Years of Experience'],
            valuesSectionTitle: 'Our Core Values',
            valuesSectionDesc: 'The principles we believe in and and apply in our daily work',
            valueItems: [
                {title: 'Trust and Integrity', desc: 'We build strong relationships with our patients based on complete trust and transparency'},
                {title: 'Quality and Excellence', desc: 'We always strive to achieve the highest standards of quality in all our medical services'},
                {title: 'Innovation and Development', desc: 'We keep pace with the latest developments in the medical field and invest in modern technologies'},
                {title: 'Compassion and Care', desc: 'We provide comprehensive and compassionate care to every patient who visits our center'},
                {title: 'Community Commitment', desc: 'We contribute to serving the community and spreading health awareness'},
                {title: 'Professional Responsibility', desc: 'We bear full responsibility for the health and safety of our patients'}
            ]
        },
        // Services page content
        services: {
            heroTitle: 'Our Comprehensive and Integrated Services',
            heroText: 'We offer a wide range of specialized medical services in ophthalmology and eye surgery, using the latest technologies and best competencies to ensure optimal results for our patients.',
            mainServicesTitle: 'Our Core Specialties',
            mainServicesDesc: 'We are here to provide comprehensive eye care',
            serviceCards: [
                {icon: '๐๏ธ', title: 'Vision Correction', desc: 'The latest laser technologies to correct vision defects and achieve clear vision.'},
                {icon: '๐ง', title: 'Dry Eye and Ocular Surface Disease', desc: 'Comprehensive diagnosis and treatment for dry eye problems and ocular surface diseases.'}, 
                {icon: '๐ฌ', title: 'Retinal Treatment', desc: 'Treatment of various retinal diseases using the latest methods and technologies.'},
                {icon: 'โช', title: 'Cataract Surgery', desc: 'A safe and effective surgical procedure to remove cataracts and restore vision.'},
                {icon: '๐', title: 'Strabismus for Children and Adults', desc: 'Diagnosis and treatment of various strabismus cases for all age groups.'},
                {icon: '๐ต', title: 'Glaucoma Surgery', desc: 'Glaucoma treatment to preserve vision and prevent complications.'}
            ],
            dryEyeSectionTitle: 'Dry Eye and Ocular Surface Disease Unit',
            dryEyeSectionDesc: 'Your eyes are our trust: The latest technologies for comprehensive diagnosis and treatment',
            dryEyeContentTitle: 'The latest diagnostic device for dry eye and ocular surface diseases in the world',
            dryEyeList: [
                'Treatment of chronic dry eye',
                'Punctal plugs and filler injections into the lacrimal canal',
                'Treatment of seasonal and chronic eye allergies',
                'Follow-up and treatment of immune and infectious corneal ulcers',
                'Treatment of corneal opacity with medication, laser, and corneal transplantation',
                'Stem cell transplantation for corneal limbal stem cell deficiency diseases'
            ],
            quickConsultation: {
                sectionTitle: 'Get a Quick Consultation โจ',
                sectionDesc: 'Describe your symptoms or inquiry, and we will help you determine the appropriate service.',
                inputPlaceholder: 'Example: I suffer from severe dry eyes with itching and redness...',
                buttonText: 'โจ Get Service Recommendation',
                emptyInputMessage: 'Please enter a description of your symptoms or inquiry.',
                errorMessage: 'Could not provide a recommendation at this time. Please try again.',
                apiErrorMessage: 'An error occurred while connecting to the service. Please try again later.'
            }
        },
        // ูุญุชูู ุตูุญุฉ ุญุฌุฒ ุงูููุงุนูุฏ
        appointment: {
            heroTitle: 'Book Your Appointment Now',
            heroText: 'Fill out the form below to book an appointment at Khaled Ezz Al-Rijal Center. We will contact you soon to confirm the appointment.',
            formTitle: 'Appointment Booking Form',
            formDesc: 'Please fill in all required fields to ensure your request is processed successfully.',
            labels: {
                fullName: 'Full Name:',
                phoneNumber: 'Phone Number:',
                nationalId: 'National ID (14 digits):',
                specialty: 'Required Specialty:',
                age: 'Age:',
                desiredTime: 'Desired Appointment Time:'
            },
            specialtyOptions: {
                placeholder: 'Select Specialty',
                visionCorrection: 'Vision Correction',
                dryEye: 'Dry Eye and Ocular Surface Disease',
                retina: 'Retinal Treatment',
                cataract: 'Cataract Surgery',
                strabismus: 'Strabismus for Children and Adults',
                glaucoma: 'Glaucoma Surgery',
                generalConsultation: 'General Consultation',
                followUp: 'Follow-up' 
            },
            submitButton: 'โ Submit Booking Request',
            successMessage: 'Your appointment request has been sent successfully! We will contact you soon.',
            errorMessage: 'An error occurred while sending your booking request. Please try again.',
            validation: {
                phoneNumber: 'Please enter a valid phone number (10-15 digits).',
                nationalId: 'Please enter a 14-digit National ID.',
                age: 'Please enter a valid age (between 1 and 120).',
                pastDateTime: 'Please select a future date and time.', 
                fridaySelection: 'Appointments cannot be booked on Fridays. Please choose another day.' 
            }
        },
        // ูุญุชูู ุตูุญุฉ ุงุชุตู ุจูุง
        contact: {
            heroTitle: 'Contact Us',
            heroText: 'We are here to answer all your inquiries and provide assistance. Do not hesitate to contact us or fill out the form below.',
            infoSectionTitle: 'Contact Information',
            infoSectionDesc: 'You can contact us through the following channels:',
            zaqaziqClinic: {
                title: 'Zaqaziq Clinic',
                workingDaysLabel: 'Working Days:', 
                workingDays: 'Saturday, Monday, Wednesday',
                generalHoursLabel: 'General Working Hours:', 
                generalHours: '9 AM - 9 PM',
                drKhaledHoursLabel: 'Dr. Khaled\'s Hours:', 
                drKhaledHours: 'Saturday 12 PM - 2 PM, Monday & Wednesday 10 AM - 7 PM',
                consultantHoursLabel: 'Consultant Hours:', 
                consultantHours: 'Other days (Glaucoma, Corneal Ulcers & Dry Eye, Pediatrics & Strabismus, Retina Clinic)',
                addressLabel: 'Address:', 
                address: 'Zaqaziq Qawmiya, Tolba Oweida Street, in front of Touta Ice Cream',
                mapLinkText: 'View on Map', 
                mapLink: 'https://maps.app.goo.gl/AAHNNJ6c3zvBJmQk9',
                whatsappLinkText: 'Clinic WhatsApp', 
                whatsappLink: 'https://api.whatsapp.com/send?phone=%2B201005595000',
                facebookLinkText: 'Facebook Page', 
                facebookLink: 'https://www.facebook.com/share/16mmwBin46/'
            },
            ibrahimiyaClinic: {
                title: 'Ibrahimiya Clinic',
                workingDaysLabel: 'Working Days:', 
                workingDays: 'Sunday, Tuesday, Thursday',
                generalHoursLabel: 'General Working Hours:', 
                generalHours: 'Sunday and Thursday',
                addressLabel: 'Address:', 
                address: 'Ibrahimiya, Hay El Sagha',
                mapLinkText: 'View on Map', 
                mapLink: 'https://maps.app.goo.gl/ayEhNVi1kKBcXv1f7',
                whatsappLinkText: 'Clinic WhatsApp', 
                whatsappLink: 'https://api.whatsapp.com/send?phone=%2B201005595000',
                facebookLinkText: 'Facebook Page', 
                facebookLink: 'https://www.facebook.com/share/16mmwBin46/'
            },
            generalPhoneNumbersTitle: 'General Contact Numbers',
            phoneNumbers: ['+20 10 02470247', '+20 10 05595000'],
            formSectionTitle: 'Send Your Complaint or Suggestion', 
            formSectionDesc: 'Fill out the form below and we will contact you as soon as possible.',
            formLabels: {
                name: 'Name:',
                phone: 'Phone Number:', 
                message: 'Your Message:'
            },
            formSubmitButton: 'โ๏ธ Send Message',
            formSuccessMessage: 'Your complaint/suggestion has been sent successfully! Thank you.', 
            formErrorMessage: 'An error occurred while sending your complaint/suggestion. Please try again.' 
        },
        footerText: 'ยฉ 2025 Khaled Ezz Al-Rijal Center. All rights reserved.'
    }
};


document.addEventListener('DOMContentLoaded', function() {
    console.log('DOMContentLoaded: Script loaded and DOM fully parsed.');

    // ุชุญุฏูุซ Footer
    const footerText = document.querySelector('footer p');
    if (footerText) footerText.textContent = 'ยฉ 2025 ูุฑูุฒ ุฎุงูุฏ ุนุฒ ุงูุฑุฌุงู. ุฌููุน ุงูุญููู ูุญููุธุฉ.';

    // ุชุญููู ุงููุบุฉ ุงููุญููุธุฉ ุนูุฏ ุจุฏุก ุงูุตูุญุฉ
    const savedLanguage = localStorage.getItem('preferred-language');
    if (savedLanguage && savedLanguage !== document.documentElement.lang) {
        toggleLanguage();
    }

    // ุฅุถุงูุฉ ุชุฃุซูุฑ ุงูููุฑ ุนูู ุงูุฃุฒุฑุงุฑ (Ripple Effect)
    const buttons = document.querySelectorAll('.btn');
    buttons.forEach(button => {
        button.addEventListener('click', function(e) {
            const ripple = document.createElement('span');
            const rect = this.getBoundingClientRect();
            const size = Math.max(rect.width, rect.height);
            const x = e.clientX - rect.left - size / 2;
            const y = e.clientY - rect.top - size / 2;
            
            ripple.style.cssText = `
                position: absolute;
                width: ${size}px;
                height: ${size}px;
                left: ${x}px;
                top: ${y}px;
                background: rgba(255, 255, 255, 0.3);
                border-radius: 50%;
                transform: scale(0);
                animation: ripple 0.6s ease-out;
                pointer-events: none;
            `;
            
            this.appendChild(ripple);
            
            setTimeout(() => {
                ripple.remove();
            }, 600);
        });
    });

    // ===== ุชุฃุซูุฑ ุฅุฎูุงุก/ุฅุธูุงุฑ ุงูููุฏุฑ ุนูุฏ ุงูุชูุฑูุฑ =====
    const header = document.querySelector('header');
    let lastScrollTop = 0;
    let isScrolling = false;
    
    // ุชุฃุซูุฑ ุชุบููุฑ ุดูุงููุฉ ุงูููุฏุฑ ุนูุฏ ุงูุชูุฑูุฑ ูุน ุฅุฎูุงุก/ุฅุธูุงุฑ
    function handleScroll() {
        if (!isScrolling) {
            window.requestAnimationFrame(function() {
                const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
                
                // ุชุบููุฑ ุฎูููุฉ ุงูููุฏุฑ ุนูุฏ ุงูุชูุฑูุฑ
                if (scrollTop > 100) {
                    header.style.backgroundColor = 'rgba(25, 118, 210, 0.95)';
                    header.style.backdropFilter = 'blur(10px)';
                } else {
                    header.style.backgroundColor = '';
                    header.style.backdropFilter = '';
                }
                
                // ุฅุฎูุงุก/ุฅุธูุงุฑ ุงูููุฏุฑ ุจูุงุกู ุนูู ุงุชุฌุงู ุงูุชูุฑูุฑ
                if (scrollTop > lastScrollTop && scrollTop > 100) {
                    // ุงูุชูุฑูุฑ ููุฃุณูู - ุฅุฎูุงุก ุงูููุฏุฑ
                    header.classList.add('header-hidden');
                } else {
                    // ุงูุชูุฑูุฑ ููุฃุนูู - ุฅุธูุงุฑ ุงูููุฏุฑ
                    header.classList.remove('header-hidden');
                }
                
                lastScrollTop = scrollTop <= 0 ? 0 : scrollTop; // ุชุฌูุจ ุงูููู ุงูุณุงูุจุฉ
                isScrolling = false;
            });
        }
        isScrolling = true;
    }
    
    // ุฅุถุงูุฉ ูุณุชูุน ุงูุฃุญุฏุงุซ ูุน throttling ูุชุญุณูู ุงูุฃุฏุงุก
    let scrollTimeout;
    window.addEventListener('scroll', function() {
        if (scrollTimeout) {
            clearTimeout(scrollTimeout);
        }
        scrollTimeout = setTimeout(handleScroll, 10); // ุชุฃุฎูุฑ ุตุบูุฑ ูุชุญุณูู ุงูุฃุฏุงุก
    });

    // ุชุฃุซูุฑ ุงูุธููุฑ ุงูุชุฏุฑูุฌู ููุนูุงุตุฑ ุนูุฏ ุงูุชูุฑูุฑ
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateY(0)';
                entry.target.classList.add('animate-in');
            }
        });
    }, observerOptions);

    const animatedElements = document.querySelectorAll('.feature-card, .vm-card, .value-item, .service-card, .dry-eye-text, .dry-eye-image-container, .quick-consultation-section, .appointment-form-container, .contact-info-section, .contact-form-section');
    animatedElements.forEach((el, index) => {
        el.style.opacity = '0';
        el.style.transform = 'translateY(30px)';
        el.style.transition = `opacity 0.6s ease ${index * 0.1}s, transform 0.6s ease ${index * 0.1}s`;
        observer.observe(el);
    });

    // ุชุฃุซูุฑ ูุชุงุจุฉ ูุต ูุชุญุฑู ูู Hero Section (ููุท ููุตูุญุฉ ุงูุฑุฆูุณูุฉ)
    const heroTitle = document.querySelector('.hero h1');
    if (heroTitle && document.body.classList.contains('home-page')) {
        const heroTextContent = heroTitle.textContent;
        function typeWriter(element, text, speed = 50) {
            element.textContent = '';
            let i = 0;
            function type() {
                if (i < text.length) {
                    element.textContent += text.charAt(i);
                    i++;
                    setTimeout(type, speed);
                }
            }
            setTimeout(type, 500);
        }

        if (!sessionStorage.getItem('visited')) {
            typeWriter(heroTitle, heroTextContent, 80);
            sessionStorage.setItem('visited', 'true');
        }
    }


    // ุชุฃุซูุฑ ุงููุงูุณ ุนูู ุงููุฑูุช
    const hoverCards = document.querySelectorAll('.feature-card, .vm-card, .value-item, .team-image-container, .service-card, .dry-eye-image-container, .info-card');
    hoverCards.forEach(card => {
        card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-10px) scale(1.02)';
        });
        
        card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0) scale(1)';
        });
    });

    // ุชุฃุซูุฑ ุชุชุจุน ุงููุงูุณ ุนูู ุงูุฃุฒุฑุงุฑ
    const primaryButtons = document.querySelectorAll('.btn-primary');
    primaryButtons.forEach(button => {
        button.addEventListener('mousemove', function(e) {
            const rect = this.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            
            this.style.background = `radial-gradient(circle at ${x}px ${y}px, rgba(255,255,255,0.2) 0%, transparent 50%), linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%)`;
        });
        
        button.addEventListener('mouseleave', function() {
            this.style.background = 'linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%)';
        });
    });

    // ุชุญุณูู ุงูุฃุฏุงุก: ุชุฃุฎูุฑ ุชุญููู ุงูุตูุฑ
    const images = document.querySelectorAll('img[data-src]');
    const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const img = entry.target;
                img.src = img.dataset.src;
                img.classList.remove('lazy');
                imageObserver.unobserve(img);
            }
        });
    });

    images.forEach(img => imageObserver.observe(img));

    // ุชุฃุซูุฑ ุงูููุฑ ุนูู ุงูุดุนุงุฑ
    const logo = document.querySelector('.logo');
    if (logo) {
        logo.addEventListener('click', function(e) {
            this.style.transform = 'scale(1.02) rotate(2deg)';
            setTimeout(() => {
                this.style.transform = '';
            }, 200);
        });
    }

    // ุฅุถุงูุฉ ุชุฃุซูุฑ ุงูุชูุฑูุฑ ุงูุณูุณ ููุฑูุงุจุท ุงูุฏุงุฎููุฉ
    const internalLinks = document.querySelectorAll('a[href^="#"]');
    internalLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const targetId = this.getAttribute('href');
            const targetElement = document.querySelector(targetId);
            
            if (targetElement) {
                targetElement.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });

    // ุฅุถุงูุฉ ูุคุดุฑ ุงูุชุญููู ุนูุฏ ุงูููุฑ ุนูู ุงูุฑูุงุจุท ุงูุฎุงุฑุฌูุฉ
    const externalLinks = document.querySelectorAll('a[href^="http"], a[href$=".html"]');
    externalLinks.forEach(link => {
        link.addEventListener('click', function() {
            this.style.opacity = '0.7';
            this.style.pointerEvents = 'none';
            setTimeout(() => {
                this.style.opacity = '';
                this.style.pointerEvents = '';
            }, 1000);
        });
    });

    // ุชุญุณูู ุชุฌุฑุจุฉ ุงููุณุชุฎุฏู: ุญูุธ ููุถุน ุงูุชูุฑูุฑ
    window.addEventListener('beforeunload', function() {
        sessionStorage.setItem('scrollPosition', window.scrollY);
    });

    const savedScrollPosition = sessionStorage.getItem('scrollPosition');
    if (savedScrollPosition) {
        window.scrollTo(0, parseInt(savedScrollPosition));
        sessionStorage.removeItem('scrollPosition');
    }
    
    // ุฅุถุงูุฉ ุชุฃุซูุฑุงุช ุตูุชูุฉ ููุชูุงุนู (ุงุฎุชูุงุฑูุฉ)
    function playClickSound() {
        // ูููู ุฅุถุงูุฉ ููู ุตูุชู ููุง ุฅุฐุง ุฃุฑุฏุช
        // const audio = new Audio('assets/sounds/click.mp3');
        // audio.volume = 0.3;
        // audio.play().catch(() => {});
    }
    document.querySelectorAll('.btn, .logo').forEach(element => {
        element.addEventListener('click', playClickSound);
    });

    console.log('๐ ุชู ุชุญููู ุฌููุน ุงูุชุฃุซูุฑุงุช ุงูุชูุงุนููุฉ ุจูุฌุงุญ!');

    // ******************************************************
    // Gemini API Integration - Service Recommendation Feature
    // ******************************************************

    const getRecommendationBtn = document.getElementById('getRecommendationBtn');
    const consultationInput = document.getElementById('consultationInput');
    const consultationResultDiv = document.getElementById('consultationResult');
    const resultText = document.getElementById('resultText');
    const loadingSpinner = consultationResultDiv ? consultationResultDiv.querySelector('.loading-spinner') : null;

    if (getRecommendationBtn) {
        console.log('Gemini API Integration: getRecommendationBtn found. Attaching event listener.');
        getRecommendationBtn.addEventListener('click', getServiceRecommendation);
    } else {
        console.warn('Gemini API Integration: getRecommendationBtn not found. Feature may not work.');
    }
    if (!consultationInput) console.warn('Gemini API Integration: consultationInput not found.');
    if (!consultationResultDiv) console.warn('Gemini API Integration: consultationResultDiv not found.');
    if (!resultText) console.warn('Gemini API Integration: resultText not found.');
    if (!loadingSpinner) console.warn('Gemini API Integration: loadingSpinner not found.');


    async function getServiceRecommendation() {
        console.log('getServiceRecommendation function called.');
        
        if (!consultationInput || !consultationResultDiv || !resultText || !loadingSpinner) {
            console.error('Missing one or more required DOM elements for consultation feature.');
            return;
        }

        const userInput = consultationInput.value.trim();
        const currentLang = document.documentElement.lang || 'ar';
        const messages = content[currentLang].services.quickConsultation; // ุงููุตูู ุฅูู ุฑุณุงุฆู ุงูุฎุทุฃ ุงููุชุฑุฌูุฉ

        if (!userInput) {
            consultationResultDiv.style.display = 'block';
            resultText.textContent = messages.emptyInputMessage;
            loadingSpinner.style.display = 'none';
            console.log('User input is empty.');
            return;
        }

        // Show loading state
        consultationResultDiv.style.display = 'flex';
        resultText.textContent = '';
        loadingSpinner.style.display = 'block';
        getRecommendationBtn.disabled = true;
        getRecommendationBtn.style.opacity = '0.7';
        console.log('Loading state activated.');

        const availableServices = [
            content[currentLang].services.serviceCards[0].title, // ุชุตุญูุญ ุงููุธุฑ
            content[currentLang].services.serviceCards[1].title, // ุงูุฌูุงู ูุฃูุฑุงุถ ุณุทุญ ุงูุนูู (ุจุนุฏ ุงูุชุนุฏูู)
            content[currentLang].services.serviceCards[2].title, // ุนูุงุฌ ุงูุดุจููุฉ
            content[currentLang].services.serviceCards[3].title, // ุฌุฑุงุญุฉ ุงููุงุก ุงูุฃุจูุถ
            content[currentLang].services.serviceCards[4].title, // ุงูุญูู
            content[currentLang].services.serviceCards[5].title  // ุฌุฑุงุญุฉ ุงููุงุก ุงูุฃุฒุฑู
        ];

        const prompt = currentLang === 'ar'
            ? `ุจูุงุกู ุนูู ุงูุฃุนุฑุงุถ ุฃู ุงูุงุณุชูุณุงุฑ ุงูุชุงูู: "${userInput}"ุ ูู ูุงุฆูุฉ ุงูุฎุฏูุงุช ุงููุชุงุญุฉ ูุฏููุง: ${availableServices.join(', ')}ุ ูุง ูู ุงูุฎุฏูุฉ ุฃู ุงูุฎุฏูุงุช ุงูุฃูุซุฑ ููุงุกูุฉุ ูุฑุฌู ุชูุฏูู ุชูุตูุฉ ููุฌุฒุฉ ููุจุงุดุฑุฉุ ูุน ุฐูุฑ ุงุณู ุงูุฎุฏูุฉ ููุท ุฅุฐุง ูุงูุช ูุงุถุญุฉุ ุฃู ุดุฑุญ ููุฌุฒ ุฅุฐุง ูุงู ููุงู ุฃูุซุฑ ูู ุฎุฏูุฉ ูุญุชููุฉ. ูุง ุชุฐูุฑ ุฃู ูุนูููุงุช ุทุจูุฉ ุบูุฑ ูุคูุฏุฉุ ููุท ุชูุตูุฉ ุจุงูุฎุฏูุฉ.`
            : `Based on the following symptoms or inquiry: "${userInput}", from our list of available services: ${availableServices.join(', ')}, what is the most suitable service(s)? Please provide a concise and direct recommendation, mentioning only the service name if it's clear, or a brief explanation if there's more than one potential service. Do not mention any unconfirmed medical information, only service recommendation.`;

        let chatHistory = [];
        chatHistory.push({ role: "user", parts: [{ text: prompt }] });
        const payload = { contents: chatHistory };
        // IMPORTANT: For local development, you need to insert your actual API Key here.
        // For Canvas environment, leave it as an empty string: const apiKey = "";
        const apiKey = "AIzaSyD2qJKikx1cGh2IngA4D215pOfAN5UwRAc"; // <--- ุชู ุชุญุฏูุซ ููุชุงุญ ุงูู API ููุง
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

        let retries = 0;
        const maxRetries = 3;
        const initialDelay = 1000; // 1 second

        while (retries < maxRetries) {
            try {
                console.log(`Attempting API call (retry ${retries + 1}/${maxRetries})...`);
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    const errorBody = await response.text();
                    console.error(`API response not OK: ${response.status} - ${errorBody}`);
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API call successful. Result:', result);

                if (result.candidates && result.candidates.length > 0 &&
                    result.candidates[0].content && result.candidates[0].content.parts &&
                    result.candidates[0].content.parts.length > 0) {
                    const text = result.candidates[0].content.parts[0].text;
                    resultText.textContent = text;
                } else {
                    console.warn('API response structure unexpected or content missing.');
                    resultText.textContent = messages.errorMessage;
                }
                break; // Exit loop on success
            } catch (error) {
                console.error('Error during API call or processing:', error);
                retries++;
                if (retries < maxRetries) {
                    const delay = initialDelay * Math.pow(2, retries - 1);
                    console.log(`Retrying in ${delay / 1000} seconds...`);
                    await new Promise(resolve => setTimeout(resolve, delay));
                } else {
                    resultText.textContent = messages.apiErrorMessage;
                    console.error('Max retries reached. Displaying final error message.');
                }
            } finally {
                loadingSpinner.style.display = 'none';
                getRecommendationBtn.disabled = false;
                getRecommendationBtn.style.opacity = '1';
                console.log('Loading state deactivated. Button re-enabled.');
            }
        }
    }

    // ******************************************************
    // Appointment Form Submission
    // ******************************************************

    const appointmentForm = document.getElementById('appointmentForm');
    const formSpinner = document.getElementById('formSpinner');
    const formMessage = document.getElementById('formMessage');
    const submitButton = appointmentForm ? appointmentForm.querySelector('.form-submit-btn') : null;
    const desiredTimeInput = document.getElementById('desiredTime'); // ุงูุญุตูู ุนูู ุญูู ุงูุชุงุฑูุฎ ูุงูููุช

    // IMPORTANT: REPLACE THIS WITH YOUR DEPLOYED GOOGLE APPS SCRIPT WEB APP URL
    const GOOGLE_APPS_SCRIPT_URL_APPOINTMENT = "https://script.google.com/macros/s/AKfycbxCRPuZtxIeLxAXJkqbu3pfZkKzcbjqoUX6MGUlv9zibkU2lNkutFE1m2cYFJrjWeRc/exec"; 

    // ุชุนููู ุงูุญุฏ ุงูุฃุฏูู ููุชุงุฑูุฎ ูุงูููุช ุนูุฏ ุชุญููู ุงูุตูุญุฉ
    function setMinDateTime() {
        const now = new Date();
        now.setMinutes(now.getMinutes() + 1); // ุฅุถุงูุฉ ุฏูููุฉ ูุงุญุฏุฉ ูุถูุงู ุฃู ุงูููุช ูู ุงููุณุชูุจู
        const year = now.getFullYear();
        const month = (now.getMonth() + 1).toString().padStart(2, '0');
        const day = now.getDate().toString().padStart(2, '0');
        const hours = now.getHours().toString().padStart(2, '0');
        const minutes = now.getMinutes().toString().padStart(2, '0');
        const minDateTime = `${year}-${month}-${day}T${hours}:${minutes}`;
        if (desiredTimeInput) {
            desiredTimeInput.min = minDateTime;
            console.log('Min datetime set to:', minDateTime);
        }
    }

    // ุงุณุชุฏุนุงุก ุงูุฏุงูุฉ ุนูุฏ ุชุญููู DOM
    if (desiredTimeInput) {
        setMinDateTime();
    }


    if (appointmentForm) {
        console.log('Appointment form found. Attaching submit listener.');
        appointmentForm.addEventListener('submit', async function(e) {
            e.preventDefault(); 

            console.log('Appointment form submitted.');

            const currentLang = document.documentElement.lang || 'ar';
            const messages = content[currentLang].appointment;

            // ุงูุชุญูู ูู ุตุญุฉ ุงูุชุงุฑูุฎ ูุงูููุช
            const selectedDateTime = new Date(desiredTimeInput.value);
            const today = new Date();
            today.setHours(0, 0, 0, 0); // ูุฅุฒุงูุฉ ุงูููุช ูู ุงูุชุงุฑูุฎ ุงูุญุงูู ููููุงุฑูุฉ ุจุงูููู ููุท

            // ุงูุชุญูู ูู ุงูุชุงุฑูุฎ ุงููุงุถู (ููุท ููุชุฃููุฏุ ูุฃู min attribute ูุฌุจ ุฃู ูุชุนุงูู ูุน ูุฐุง)
            if (selectedDateTime < new Date(new Date().setMinutes(new Date().getMinutes() - 1))) { // ููุงุฑูุฉ ุจุงูููุช ุงูุญุงูู ูุงูุต ุฏูููุฉ ูุถูุงู ุนุฏู ูุจูู ุงููุงุถู ุงููุฑูุจ
                formMessage.textContent = messages.validation.pastDateTime;
                formMessage.classList.add('error');
                formMessage.style.display = 'block';
                formMessage.style.opacity = '1';
                console.log('Validation failed: Past date/time selected.');
                return;
            }

            // ุงูุชุญูู ูู ููู ุงูุฌูุนุฉ (ููู ุงูุฌูุนุฉ ูู 5 ูู getDay() ุญูุซ ุงูุฃุญุฏ 0)
            if (selectedDateTime.getDay() === 5) { // 5 represents Friday
                formMessage.textContent = messages.validation.fridaySelection;
                formMessage.classList.add('error');
                formMessage.style.display = 'block';
                formMessage.style.opacity = '1';
                console.log('Validation failed: Friday selected.');
                return;
            }
            
            // ุฅุฎูุงุก ุฃู ุฑุณุงุฆู ุณุงุจูุฉ
            formMessage.style.display = 'none';
            formMessage.classList.remove('success', 'error');
            formMessage.textContent = '';
            formSpinner.style.display = 'block'; 
            if (submitButton) {
                submitButton.disabled = true;
                submitButton.style.opacity = '0.7';
            }

            // ุฌูุน ุจูุงูุงุช ุงููููุฐุฌ
            const formData = new FormData(appointmentForm);
            const data = {};
            for (let [key, value] of formData.entries()) {
                data[key] = value;
            }

            try {
                console.log('Sending data to Google Apps Script:', data);
                const response = await fetch(GOOGLE_APPS_SCRIPT_URL_APPOINTMENT, { // ุงุณุชุฎุฏุงู URL ุงูุฎุงุต ุจูููุฐุฌ ุงูููุงุนูุฏ
                    method: 'POST',
                    mode: 'no-cors', 
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data),
                });

                formMessage.textContent = messages.successMessage;
                formMessage.classList.add('success');
                formMessage.style.display = 'block';
                formMessage.style.opacity = '1';
                appointmentForm.reset(); 
                console.log('Form submission assumed successful (due to no-cors mode).');

            } catch (error) {
                console.error('Error submitting form:', error); 
                formMessage.textContent = messages.errorMessage;
                formMessage.classList.add('error');
                formMessage.style.display = 'block';
                formMessage.style.opacity = '1';
            } finally {
                formSpinner.style.display = 'none'; 
                if (submitButton) {
                    submitButton.disabled = false;
                    submitButton.style.opacity = '1';
                }
                // ุฅุนุงุฏุฉ ุชุนููู ุงูุญุฏ ุงูุฃุฏูู ููุชุงุฑูุฎ ุจุนุฏ ุงูุฅุฑุณุงู ุงููุงุฌุญ ุฃู ุงููุดู
                setMinDateTime();
            }
        });
    } else {
        console.warn('Appointment form not found. Form submission feature will not work.');
    }

    // ******************************************************
    // Contact Form Submission (Complaints/Suggestions)
    // ******************************************************

    const contactForm = document.getElementById('contactForm');
    const contactFormSpinner = document.getElementById('contactFormSpinner');
    const contactFormMessage = document.getElementById('contactFormMessage');
    const contactSubmitButton = contactForm ? contactForm.querySelector('.contact-submit-btn') : null;

    // IMPORTANT: REPLACE THIS WITH YOUR DEPLOYED GOOGLE APPS SCRIPT WEB APP URL FOR CONTACT FORM
    const GOOGLE_APPS_SCRIPT_URL_CONTACT = "https://script.google.com/macros/s/AKfycbz4K7_0gslphMWqRUFiyygEKQDDjjIAWNY-WowHH8pp_Qjh07WdQp_sbVySCpBfxz_I/exec"; 

    if (contactForm) {
        console.log('Contact form found. Attaching submit listener.');
        contactForm.addEventListener('submit', async function(e) {
            e.preventDefault();

            console.log('Contact form submitted.');

            // ุฅุฎูุงุก ุฃู ุฑุณุงุฆู ุณุงุจูุฉ
            contactFormMessage.style.display = 'none';
            contactFormMessage.classList.remove('success', 'error');
            contactFormMessage.textContent = '';
            contactFormSpinner.style.display = 'block';
            if (contactSubmitButton) {
                contactSubmitButton.disabled = true;
                contactSubmitButton.style.opacity = '0.7';
            }

            const currentLang = document.documentElement.lang || 'ar';
            const messages = content[currentLang].contact;

            // ุฌูุน ุจูุงูุงุช ุงููููุฐุฌ
            const formData = new FormData(contactForm);
            const data = {};
            for (let [key, value] of formData.entries()) {
                data[key] = value;
            }

            try {
                console.log('Sending contact form data to Google Apps Script:', data);
                const response = await fetch(GOOGLE_APPS_SCRIPT_URL_CONTACT, { // ุงุณุชุฎุฏุงู URL ุงูุฎุงุต ุจูููุฐุฌ ุงูุงุชุตุงู
                    method: 'POST',
                    mode: 'no-cors',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data),
                });

                contactFormMessage.textContent = messages.formSuccessMessage;
                contactFormMessage.classList.add('success');
                contactFormMessage.style.display = 'block';
                contactFormMessage.style.opacity = '1';
                contactForm.reset();
                console.log('Contact form submission assumed successful (due to no-cors mode).');

            } catch (error) {
                console.error('Error submitting contact form:', error);
                contactFormMessage.textContent = messages.formErrorMessage;
                contactFormMessage.classList.add('error');
                contactFormMessage.style.display = 'block';
                contactFormMessage.style.opacity = '1';
            } finally {
                contactFormSpinner.style.display = 'none';
                if (contactSubmitButton) {
                    contactSubmitButton.disabled = false;
                    contactSubmitButton.style.opacity = '1';
                }
            }
        });
    } else {
        console.warn('Contact form not found. Contact form submission feature will not work.');
    }
});

// ูุธููุฉ ุชุจุฏูู ุงููุบุฉ
function toggleLanguage() {
    const html = document.documentElement;
    const currentLang = html.lang || 'ar';
    
    if (currentLang === 'ar') {
        html.lang = 'en';
        html.dir = 'ltr';
        html.style.textAlign = 'left';
        updateContent('en');
    } else {
        html.lang = 'ar';
        html.dir = 'rtl';
        html.style.textAlign = 'right';
        updateContent('ar');
    }
    
    updateLanguageButton();
    localStorage.setItem('preferred-language', html.lang);
}

// ุชุญุฏูุซ ุงููุญุชูู ุจูุงุกู ุนูู ุงููุบุฉ
function updateContent(lang) {
    console.log('updateContent called for language:', lang); 
    const html = document.documentElement; 
    const currentPath = window.location.pathname;
    let pageData; 

    // ุชุญุฏูุซ ุฑูุงุจุท ุงูุชููู (ูุดุชุฑูุฉ ุจูู ุฌููุน ุงูุตูุญุงุช)
    const navLinks = document.querySelectorAll('nav a');
    navLinks.forEach((link, index) => {
        if (content[lang].navLinks[index]) link.textContent = content[lang].navLinks[index];
    });
    
    // ุชุญุฏูุซ ูุญุชูู ุงูุตูุญุงุช ุงููุฑุฏูุฉ
    if (currentPath.includes('about.html')) {
        pageData = content[lang].about;
        document.title = lang === 'ar' ? 'ูู ูุญู - ูุฑูุฒ ุฎุงูุฏ ุนุฒ ุงูุฑุฌุงู' : 'About Us - Khaled Ezz Al-Rijal Center';
        
        // ุชุญุฏูุซ ูุณู Hero
        const aboutHeroTitle = document.querySelector('.about-hero h1');
        const aboutHeroText = document.querySelector('.about-hero p');
        if (aboutHeroTitle) aboutHeroTitle.textContent = pageData.heroTitle;
        if (aboutHeroText) aboutHeroText.textContent = pageData.heroText;

        // ุชุญุฏูุซ ูุณู ุงููุฑูู ุงูุทุจู
        const teamSectionTitle = document.querySelector('.team-section .section-title h2');
        const teamSectionDesc = document.querySelector('.team-section .section-title p');
        const teamOverlayTitle = document.querySelector('.team-overlay h3');
        const teamOverlayDesc = document.querySelector('.team-overlay p');
        if (teamSectionTitle) teamSectionTitle.textContent = pageData.teamSectionTitle;
        if (teamSectionDesc) teamSectionDesc.textContent = pageData.teamSectionDesc;
        if (teamOverlayTitle) teamOverlayTitle.textContent = pageData.teamOverlayTitle;
        if (teamOverlayDesc) teamOverlayDesc.textContent = pageData.teamOverlayDesc;

        // ุชุญุฏูุซ ูุณู ุงูุฑุคูุฉ ูุงูุฑุณุงูุฉ
        const visionMissionTitle = document.querySelector('.vision-mission .section-title h2');
        const visionMissionDesc = document.querySelector('.vision-mission .section-title p');
        const vmCards = document.querySelectorAll('.vm-card');
        if (visionMissionTitle) visionMissionTitle.textContent = pageData.visionMissionTitle;
        if (visionMissionDesc) visionMissionDesc.textContent = pageData.visionMissionDesc;
        if (vmCards[0]) {
            vmCards[0].querySelector('h3').textContent = pageData.visionCardTitle;
            vmCards[0].querySelector('p').textContent = pageData.visionCardDesc;
        }
        if (vmCards[1]) {
            vmCards[1].querySelector('h3').textContent = pageData.missionCardTitle;
            vmCards[1].querySelector('p').textContent = pageData.missionCardDesc;
        }

        // ุชุญุฏูุซ ูุณู ุงูุฅุญุตุงุฆูุงุช (ุฅุฐุง ูุงู ููุฌูุฏูุง)
        const statsSectionTitle = document.querySelector('.stats-section .section-title h2');
        const statsSectionDesc = document.querySelector('.stats-section .section-title p');
        const statLabels = document.querySelectorAll('.stat-label');
        if (statsSectionTitle) statsSectionTitle.textContent = pageData.statsSectionTitle;
        if (statsSectionDesc) statsSectionDesc.textContent = pageData.statsSectionDesc;
        if (statLabels[0] && pageData.statLabels[0]) {
            statLabels[0].textContent = pageData.statLabels[0];
        }
        for (let i = 1; i < statLabels.length; i++) {
            const statItem = statLabels[i].closest('.stat-item');
            if (statItem) statItem.style.display = 'none';
        }

        // ุชุญุฏูุซ ูุณู ุงูููู ุงูุฃุณุงุณูุฉ
        const valuesSectionTitle = document.querySelector('.values-section .section-title h2');
        const valuesSectionDesc = document.querySelector('.values-section .section-title p');
        const valueItems = document.querySelectorAll('.value-item');
        if (valuesSectionTitle) valuesSectionTitle.textContent = pageData.valuesSectionTitle;
        if (valuesSectionDesc) valuesSectionDesc.textContent = pageData.valuesSectionDesc;
        valueItems.forEach((item, index) => {
            const title = item.querySelector('h4');
            const desc = item.querySelector('p');
            if (title && pageData.valueItems[index]) title.textContent = pageData.valueItems[index].title;
            if (desc && pageData.valueItems[index]) desc.textContent = pageData.valueItems[index].desc;
        });

    } else if (currentPath.includes('services.html')) {
        pageData = content[lang].services;
        document.title = lang === 'ar' ? 'ุงูุฎุฏูุงุช - ูุฑูุฒ ุฎุงูุฏ ุนุฒ ุงูุฑุฌุงู' : 'Services - Khaled Ezz Al-Rijal Center';
        
        // ุชุญุฏูุซ ูุณู Hero
        const servicesHeroTitle = document.querySelector('.services-hero h1');
        const servicesHeroText = document.querySelector('.services-hero p');
        if (servicesHeroTitle) servicesHeroTitle.textContent = pageData.heroTitle;
        if (servicesHeroText) servicesHeroText.textContent = pageData.heroText;

        // ุชุญุฏูุซ ูุณู ุงูุฎุฏูุงุช ุงูุฑุฆูุณูุฉ
        const mainServicesTitle = document.querySelector('.features .section-title h2');
        const mainServicesDesc = document.querySelector('.features .section-title p');
        const serviceCards = document.querySelectorAll('.service-card');
        if (mainServicesTitle) mainServicesTitle.textContent = pageData.mainServicesTitle;
        if (mainServicesDesc) mainServicesDesc.textContent = pageData.mainServicesDesc;
        serviceCards.forEach((card, index) => {
            const icon = card.querySelector('.service-icon');
            const title = card.querySelector('h3');
            const desc = card.querySelector('p');
            if (icon && pageData.serviceCards[index]) icon.textContent = pageData.serviceCards[index].icon;
            if (title && pageData.serviceCards[index]) title.textContent = pageData.serviceCards[index].title;
            if (desc && pageData.serviceCards[index]) desc.textContent = pageData.serviceCards[index].desc;
        });

        // ุชุญุฏูุซ ูุณู ูุญุฏุฉ ุนูุงุฌ ุงูุฌูุงู
        const dryEyeSectionTitle = document.querySelector('.dry-eye-section .section-title h2');
        const dryEyeSectionDesc = document.querySelector('.dry-eye-section .section-title p');
        const dryEyeContentTitle = document.querySelector('.dry-eye-text h2');
        const dryEyeListItems = document.querySelectorAll('.dry-eye-list li');
        if (dryEyeSectionTitle) dryEyeSectionTitle.textContent = pageData.dryEyeSectionTitle;
        if (dryEyeSectionDesc) dryEyeSectionDesc.textContent = pageData.dryEyeSectionDesc;
        if (dryEyeContentTitle) dryEyeContentTitle.textContent = pageData.dryEyeContentTitle;
        dryEyeListItems.forEach((item, index) => {
            if (pageData.dryEyeList[index]) item.lastChild.textContent = pageData.dryEyeList[index];
        });
        
        // ุชุญุฏูุซ ูุณู ุงูุงุณุชุดุงุฑุฉ ุงูุณุฑูุนุฉ
        const qcSectionTitle = document.querySelector('.quick-consultation-section .section-title h2');
        const qcSectionDesc = document.querySelector('.quick-consultation-section .section-title p');
        const qcInput = document.getElementById('consultationInput');
        const qcButton = document.getElementById('getRecommendationBtn');
        const consultationResultDiv = document.getElementById('consultationResult');

        if (qcSectionTitle) qcSectionTitle.textContent = pageData.quickConsultation.sectionTitle;
        if (qcSectionDesc) qcSectionDesc.textContent = pageData.quickConsultation.sectionDesc;
        if (qcInput) qcInput.placeholder = pageData.quickConsultation.inputPlaceholder;
        if (qcButton) qcButton.innerHTML = pageData.quickConsultation.buttonText;
        
        // Reset the consultation result display when language changes
        if (consultationResultDiv) {
            consultationResultDiv.style.display = 'none';
            const resultTextElement = consultationResultDiv.querySelector('#resultText');
            if (resultTextElement) resultTextElement.textContent = '';
            const spinnerElement = consultationResultDiv.querySelector('.loading-spinner');
            if (spinnerElement) spinnerElement.style.display = 'none';
        }

    } else if (currentPath.includes('appointment.html')) {
        pageData = content[lang].appointment;
        document.title = lang === 'ar' ? 'ุงุญุฌุฒ ููุนุฏ - ูุฑูุฒ ุฎุงูุฏ ุนุฒ ุงูุฑุฌุงู' : 'Book Appointment - Khaled Ezz Al-Rijal Center';

        // Update hero section
        const apptHeroTitle = document.querySelector('.appointment-hero h1');
        const apptHeroText = document.querySelector('.appointment-hero p');
        if (apptHeroTitle) apptHeroTitle.textContent = pageData.heroTitle;
        if (apptHeroText) apptHeroText.textContent = pageData.heroText;

        // Update form section title and description
        const formSectionTitle = document.querySelector('.appointment-form-section .section-title h2');
        const formSectionDesc = document.querySelector('.appointment-form-section .section-title p');
        if (formSectionTitle) formSectionTitle.textContent = pageData.formTitle;
        if (formSectionDesc) formSectionDesc.textContent = pageData.formDesc;

        // Update form labels and placeholders
        document.querySelector('label[for="fullName"]').textContent = pageData.labels.fullName;
        document.querySelector('label[for="phoneNumber"]').textContent = pageData.labels.phoneNumber;
        document.querySelector('input[name="phoneNumber"]').setAttribute('title', pageData.validation.phoneNumber);
        document.querySelector('label[for="nationalId"]').textContent = pageData.labels.nationalId;
        document.querySelector('input[name="nationalId"]').setAttribute('title', pageData.validation.nationalId);
        document.querySelector('label[for="specialty"]').textContent = pageData.labels.specialty;
        document.querySelector('label[for="age"]').textContent = pageData.labels.age;
        document.querySelector('input[name="age"]').setAttribute('title', pageData.validation.age);
        document.querySelector('label[for="desiredTime"]').textContent = pageData.labels.desiredTime;
        
        // Update specialty options
        const specialtySelect = document.getElementById('specialty');
        if (specialtySelect) {
            while (specialtySelect.options.length > 1) {
                specialtySelect.remove(1);
            }
            const specialtyKeys = ['visionCorrection', 'dryEye', 'retina', 'cataract', 'strabismus', 'glaucoma', 'generalConsultation', 'followUp'];
            specialtyKeys.forEach(key => {
                const option = document.createElement('option');
                option.value = pageData.specialtyOptions[key];
                option.textContent = pageData.specialtyOptions[key];
                specialtySelect.appendChild(option);
            });
        }

        // Update submit button text
        const submitBtn = document.querySelector('.form-submit-btn');
        if (submitBtn) submitBtn.innerHTML = pageData.submitButton;

        // Reset form message display
        const formMessageElement = document.getElementById('formMessage');
        if (formMessageElement) {
            formMessageElement.style.display = 'none';
            formMessageElement.classList.remove('success', 'error');
            formMessageElement.textContent = '';
        }

    } else if (currentPath.includes('contact.html')) {
        pageData = content[lang].contact;
        document.title = lang === 'ar' ? 'ุชูุงุตู ูุนูุง - ูุฑูุฒ ุฎุงูุฏ ุนุฒ ุงูุฑุฌุงู' : 'Contact Us - Khaled Ezz Al-Rijal Center';

        // Update hero section
        const contactHeroTitle = document.querySelector('.contact-hero h1');
        const contactHeroText = document.querySelector('.contact-hero p');
        if (contactHeroTitle) contactHeroTitle.textContent = pageData.heroTitle;
        if (contactHeroText) contactHeroText.textContent = pageData.heroText;

        // Update contact info section
        const infoSectionTitle = document.querySelector('.contact-info-section .section-title h2');
        const infoSectionDesc = document.querySelector('.contact-info-section .section-title p');
        if (infoSectionTitle) infoSectionTitle.textContent = pageData.infoSectionTitle;
        if (infoSectionDesc) infoSectionDesc.textContent = pageData.infoSectionDesc;

        // Update Zaqaziq Clinic card
        const zaqaziqClinicCard = document.getElementById('zaqaziqClinic');
        if (zaqaziqClinicCard) {
            zaqaziqClinicCard.querySelector('h3').textContent = pageData.zaqaziqClinic.title + ' ๐ฅ';
            // ุชุญุฏูุซ ุงููุตูุต ุฏุงุฎู li ุจุงุณุชุฎุฏุงู .card-label ู .card-value
            zaqaziqClinicCard.querySelector('li:nth-of-type(1) .card-label').textContent = pageData.zaqaziqClinic.workingDaysLabel;
            zaqaziqClinicCard.querySelector('li:nth-of-type(1) .card-value').textContent = pageData.zaqaziqClinic.workingDays;
            
            zaqaziqClinicCard.querySelector('li:nth-of-type(2) .card-label').textContent = pageData.zaqaziqClinic.generalHoursLabel;
            zaqaziqClinicCard.querySelector('li:nth-of-type(2) .card-value').textContent = pageData.zaqaziqClinic.generalHours;

            zaqaziqClinicCard.querySelector('li:nth-of-type(3) .card-label').textContent = pageData.zaqaziqClinic.drKhaledHoursLabel;
            zaqaziqClinicCard.querySelector('li:nth-of-type(3) .card-value').textContent = pageData.zaqaziqClinic.drKhaledHours;

            zaqaziqClinicCard.querySelector('li:nth-of-type(4) .card-label').textContent = pageData.zaqaziqClinic.consultantHoursLabel;
            zaqaziqClinicCard.querySelector('li:nth-of-type(4) .card-value').textContent = pageData.zaqaziqClinic.consultantHours;

            zaqaziqClinicCard.querySelector('li:nth-of-type(5) .card-label').textContent = pageData.zaqaziqClinic.addressLabel;
            zaqaziqClinicCard.querySelector('li:nth-of-type(5) .card-value').textContent = pageData.zaqaziqClinic.address;

            // ุชุญุฏูุซ ุฑูุงุจุท ุงูุฎุฑุงุฆุท ููุงุชุณุงุจ ูููุณุจูู
            zaqaziqClinicCard.querySelector('a[href*="maps.app.goo.gl"]').textContent = pageData.zaqaziqClinic.mapLinkText;
            zaqaziqClinicCard.querySelector('a[href*="maps.app.goo.gl"]').href = pageData.zaqaziqClinic.mapLink;
            zaqaziqClinicCard.querySelector('a[href*="whatsapp.com"]').textContent = pageData.zaqaziqClinic.whatsappLinkText;
            zaqaziqClinicCard.querySelector('a[href*="whatsapp.com"]').href = pageData.zaqaziqClinic.whatsappLink;
            zaqaziqClinicCard.querySelector('a[href*="facebook.com"]').textContent = pageData.zaqaziqClinic.facebookLinkText;
            zaqaziqClinicCard.querySelector('a[href*="facebook.com"]').href = pageData.zaqaziqClinic.facebookLink;
        }

        // Update Ibrahimiya Clinic card
        const ibrahimiyaClinicCard = document.getElementById('ibrahimiyaClinic');
        if (ibrahimiyaClinicCard) {
            ibrahimiyaClinicCard.querySelector('h3').textContent = pageData.ibrahimiyaClinic.title + ' ๐ฅ';
            // ุชุญุฏูุซ ุงููุตูุต ุฏุงุฎู li ุจุงุณุชุฎุฏุงู .card-label ู .card-value
            ibrahimiyaClinicCard.querySelector('li:nth-of-type(1) .card-label').textContent = pageData.ibrahimiyaClinic.workingDaysLabel;
            ibrahimiyaClinicCard.querySelector('li:nth-of-type(1) .card-value').textContent = pageData.ibrahimiyaClinic.workingDays;

            ibrahimiyaClinicCard.querySelector('li:nth-of-type(2) .card-label').textContent = pageData.ibrahimiyaClinic.generalHoursLabel;
            ibrahimiyaClinicCard.querySelector('li:nth-of-type(2) .card-value').textContent = pageData.ibrahimiyaClinic.generalHours;

            ibrahimiyaClinicCard.querySelector('li:nth-of-type(3) .card-label').textContent = pageData.ibrahimiyaClinic.addressLabel;
            ibrahimiyaClinicCard.querySelector('li:nth-of-type(3) .card-value').textContent = pageData.ibrahimiyaClinic.address;

            // ุชุญุฏูุซ ุฑูุงุจุท ุงูุฎุฑุงุฆุท ููุงุชุณุงุจ ูููุณุจูู
            ibrahimiyaClinicCard.querySelector('a[href*="maps.app.goo.gl"]').textContent = pageData.ibrahimiyaClinic.mapLinkText;
            ibrahimiyaClinicCard.querySelector('a[href*="maps.app.goo.gl"]').href = pageData.ibrahimiyaClinic.mapLink;
            ibrahimiyaClinicCard.querySelector('a[href*="whatsapp.com"]').textContent = pageData.ibrahimiyaClinic.whatsappLinkText;
            ibrahimiyaClinicCard.querySelector('a[href*="whatsapp.com"]').href = pageData.ibrahimiyaClinic.whatsappLink;
            ibrahimiyaClinicCard.querySelector('a[href*="facebook.com"]').textContent = pageData.ibrahimiyaClinic.facebookLinkText;
            ibrahimiyaClinicCard.querySelector('a[href*="facebook.com"]').href = pageData.ibrahimiyaClinic.facebookLink;
        }

        // Update General Phone Numbers
        const generalPhoneNumbersSection = document.querySelector('.general-contact-info');
        if (generalPhoneNumbersSection) {
            generalPhoneNumbersSection.querySelector('h3').textContent = pageData.generalPhoneNumbersTitle + ' ๐';
            const phoneLinks = generalPhoneNumbersSection.querySelectorAll('.phone-numbers a');
            phoneLinks.forEach((link, index) => {
                if (pageData.phoneNumbers[index]) {
                    link.textContent = pageData.phoneNumbers[index];
                    link.href = `tel:${pageData.phoneNumbers[index].replace(/\s/g, '')}`;
                }
            });
        }

        // Update contact form section
        const contactFormSectionTitle = document.querySelector('.contact-form-section .section-title h2');
        const contactFormSectionDesc = document.querySelector('.contact-form-section .section-title p');
        if (contactFormSectionTitle) contactFormSectionTitle.textContent = pageData.formSectionTitle;
        if (contactFormSectionDesc) contactFormSectionDesc.textContent = pageData.formSectionDesc;

        // Update form labels and button
        document.querySelector('label[for="contactName"]').textContent = pageData.formLabels.name;
        document.querySelector('label[for="contactPhone"]').textContent = pageData.formLabels.phone; 
        document.querySelector('label[for="contactMessage"]').textContent = pageData.formLabels.message;
        document.querySelector('.contact-submit-btn').innerHTML = pageData.formSubmitButton;

    } else { // This block handles index.html
        pageData = content[lang].home;
        document.title = lang === 'ar' ? 'ุงูุฑุฆูุณูุฉ - ูุฑูุฒ ุฎุงูุฏ ุนุฒ ุงูุฑุฌุงู' : 'Home - Khaled Ezz Al-Rijal Center';

        // ุชุญุฏูุซ Hero Section
        const heroTitle = document.querySelector('.hero h1');
        const heroText = document.querySelector('.hero p');
        const ctaButtons = document.querySelectorAll('.cta-buttons .btn');
        if (heroTitle) heroTitle.textContent = pageData.heroTitle;
        if (heroText) heroText.textContent = pageData.heroText;
        if (ctaButtons[0]) ctaButtons[0].innerHTML = pageData.ctaButtons[0];
        if (ctaButtons[1]) ctaButtons[1].innerHTML = pageData.ctaButtons[1];

        // ุชุญุฏูุซ ูุณู ุงูููุฒุงุช
        const sectionTitle = document.querySelector('.features .section-title h2');
        const sectionDesc = document.querySelector('.features .section-title p');
        const featureCards = document.querySelectorAll('.feature-card');
        if (sectionTitle) sectionTitle.textContent = pageData.sectionTitle;
        if (sectionDesc) sectionDesc.textContent = pageData.sectionDesc;
        featureCards.forEach((card, index) => {
            const title = card.querySelector('h3');
            const desc = card.querySelector('p');
            if (title && pageData.featureCards[index]) title.textContent = pageData.featureCards[index].title;
            if (desc && pageData.featureCards[index]) desc.textContent = pageData.featureCards[index].desc;
        });
    }
    
    // ุชุญุฏูุซ Footer (ูุดุชุฑู ุจูู ุงูุตูุญุงุช)
    const footerText = document.querySelector('footer p');
    if (footerText) footerText.textContent = content[lang].footerText;
}

// ุชุญุฏูุซ ูุต ุฒุฑ ุงููุบุฉ
function updateLanguageButton() {
    const langButton = document.querySelector('.lang-toggle');
    const langText = document.querySelector('.lang-text');
    const currentLang = document.documentElement.lang || 'ar';
    
    if (langButton && langText) {
        if (currentLang === 'ar') {
            langText.textContent = 'English';
            langButton.setAttribute('title', 'Switch to English');
        } else {
            langText.textContent = 'ุนุฑุจู';
            langButton.setAttribute('title', 'ุงูุชุจุฏูู ููุนุฑุจูุฉ');
        }
    }
}